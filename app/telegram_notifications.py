"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
–†–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ FastAPI
"""
import asyncio
import os
import re
from typing import Optional, Tuple
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

from app.database import get_device_chats, get_device_by_id

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config.env')

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
_bot: Optional[Bot] = None
_loop: Optional[asyncio.AbstractEventLoop] = None


def init_telegram_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global _bot, _loop
    
    if not BOT_TOKEN:
        print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return
    
    try:
        _bot = Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        print("‚úÖ Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")


def extract_halyk_code(sender: str, message: str) -> Tuple[Optional[str], bool]:
    """
    –ò–∑–≤–ª–µ—á—å –∫–æ–¥ –∏–∑ SMS –æ—Ç Halyk –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø (Google Pay –∏–ª–∏ Apple Wallet)
    
    Returns:
        Tuple[code, is_apple]: (–∫–æ–¥ –∏–ª–∏ None, True –µ—Å–ª–∏ Apple Wallet)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SMS –æ—Ç Halyk (–ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
    if 'halyk' not in sender.lower():
        return None, False
    
    # –ò—â–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    code_match = re.search(r'^(\d{6})', message.strip())
    if not code_match:
        return None, False
    
    code = code_match.group(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø (Apple Wallet –∏–ª–∏ Google Pay)
    is_apple = 'apple' in message.lower() or 'iphone' in message.lower()
    
    return code, is_apple


async def _send_sms_notification_async(device_id: str, sender: str, message: str, timestamp: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ SMS"""
    if not _bot:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        chat_ids = get_device_chats(device_id)
        
        if not chat_ids:
            print(f"   ‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        device = get_device_by_id(device_id)
        device_name = device.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') if device else device_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –æ—Ç Halyk
        code, is_apple = extract_halyk_code(sender, message)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –≤ <pre> –µ—Å–ª–∏ —ç—Ç–æ Halyk
        formatted_message = message
        if code:
            formatted_message = message.replace(code, f'<pre>{code}</pre>', 1)
        
        # –ë–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = (
            f"üì® <b>–ù–æ–≤–æ–µ SMS</b>\n\n"
            f"<b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> {device_name}\n"
            f"<b>–û—Ç:</b> <code>{sender}</code>\n"
            f"<b>–í—Ä–µ–º—è:</b> {timestamp}\n\n"
            f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{formatted_message}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è Apple Wallet
        if code and is_apple:
            notification += "\n\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –∫–æ–¥ –¥–ª—è <b>iPhone</b> (Apple Wallet)!\nüö® –í –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ —Ç–∞–∫–∏–µ –∫–æ–¥—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –æ–ø–∞—Å–Ω—ã–º–∏!"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ —á–∞—Ç—ã
        for chat_id in chat_ids:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await _bot.send_message(chat_id, notification)
                print(f"   ‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —á–∞—Ç {chat_id}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


def send_sms_notification(device_id: str, sender: str, message: str, timestamp: str):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º SMS (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ FastAPI
    """
    if not _bot:
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(
            _send_sms_notification_async(device_id, sender, message, timestamp)
        )
        loop.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_sms_notification: {e}")


async def send_sms_notification_async(device_id: str, sender: str, message: str, timestamp: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """
    try:
        await _send_sms_notification_async(device_id, sender, message, timestamp)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_sms_notification_async: {e}")
        import traceback
        traceback.print_exc()

