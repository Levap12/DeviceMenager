"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç aiogram 3.x
"""
import asyncio
import os
import sys
from datetime import datetime, timedelta
from typing import List
import pytz

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import aiohttp

from app.database import (
    init_database,
    get_all_devices,
    get_device_by_id,
    add_device_binding,
    remove_device_binding,
    get_chat_bindings,
    get_device_chats
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config.env')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEB_URL = os.getenv('WEB_URL', 'http://localhost:8000')
API_URL = os.getenv('API_URL', 'http://localhost:8000')

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [452398375, 8151581578]

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
KAZAKHSTAN_TZ = pytz.timezone('Asia/Ashkhabad')  # UTC+5

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
if not BOT_TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ config.env")
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.env –Ω–∞ –æ—Å–Ω–æ–≤–µ config.env.example")
    sys.exit(1)

bot = Bot(
    token=BOT_TOKEN, 
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —Å—Ä–∞–∑—É
dp.include_router(router)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ—Ç–∞ (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
_bot_instance = None


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


def format_time_ago(timestamp_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω)"""
    if not timestamp_str:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        try:
            # –§–æ—Ä–º–∞—Ç: "DD.MM.YYYY HH:MM:SS"
            last_seen = datetime.strptime(timestamp_str, "%d.%m.%Y %H:%M:%S")
        except:
            # –§–æ—Ä–º–∞—Ç ISO
            last_seen = datetime.fromisoformat(timestamp_str)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∫ –≤—Ä–µ–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        last_seen = KAZAKHSTAN_TZ.localize(last_seen)
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
        now = datetime.now(KAZAKHSTAN_TZ)
        
        # –†–∞–∑–Ω–∏—Ü–∞
        diff = now - last_seen
        minutes = int(diff.total_seconds() / 60)
        hours = int(diff.total_seconds() / 3600)
        days = diff.days
        
        if minutes < 1:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
        elif minutes < 60:
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        elif hours < 24:
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif days < 7:
            return f"{days} –¥–Ω. –Ω–∞–∑–∞–¥"
        else:
            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
            return last_seen.strftime("%d.%m.%Y %H:%M")
    except Exception as e:
        return timestamp_str


def format_device_info(device: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
    status = "üü¢ –û–Ω–ª–∞–π–Ω" if device.get('online') else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
    battery = device.get('battery', 0)
    
    # Emoji –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏
    if battery < 20:
        battery_emoji = "üî¥"
    elif battery < 50:
        battery_emoji = "üü°"
    else:
        battery_emoji = "üü¢"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    last_seen = format_time_ago(device.get('last_seen'))
    
    return (
        f"<b>{device.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}</b>\n"
        f"‚îú ID: <code>{device.get('id')}</code>\n"
        f"‚îú –°—Ç–∞—Ç—É—Å: {status}\n"
        f"‚îú –ë–∞—Ç–∞—Ä–µ—è: {battery_emoji} {battery}%\n"
        f"‚îú –°–∏–≥–Ω–∞–ª: {device.get('signal_strength', 0)}%\n"
        f"‚îú –°–µ—Ç—å: {device.get('network_type', 'Unknown')}\n"
        f"‚îú –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {device.get('internet', 'Unknown')}\n"
        f"‚îî –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_seen}"
    )


def get_devices_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_devices"),
            InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=WEB_URL)
        ]
    ])
    return keyboard


async def get_devices_message() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        devices = get_all_devices()
        
        if not devices:
            return "üì± <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b>\n\n‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
        
        online_count = sum(1 for d in devices if d.get('online'))
        offline_count = len(devices) - online_count
        
        message = (
            f"üì± <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(devices)})</b>\n"
            f"üü¢ –û–Ω–ª–∞–π–Ω: {online_count} | üî¥ –û—Ñ—Ñ–ª–∞–π–Ω: {offline_count}\n\n"
        )
        
        for i, device in enumerate(devices, 1):
            message += f"{i}. {format_device_info(device)}\n\n"
        
        return message
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {str(e)}"


@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
            "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    devices_text = await get_devices_message()
    
    await message.answer(
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Device Manager!</b>\n\n"
        f"{devices_text}\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"/add &lt;device_id&gt; - –ü—Ä–∏–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É\n"
        f"/remove &lt;device_id&gt; - –û—Ç–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç —á–∞—Ç–∞\n"
        f"/list - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
        f"/devices - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        reply_markup=get_devices_keyboard()
    )


@router.message(Command("devices"))
async def cmd_devices(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    devices_text = await get_devices_message()
    await message.answer(devices_text, reply_markup=get_devices_keyboard())


@router.callback_query(F.data == "refresh_devices")
async def refresh_devices(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    
    if not is_admin(user_id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    devices_text = await get_devices_message()
    
    try:
        await callback.message.edit_text(
            devices_text,
            reply_markup=get_devices_keyboard()
        )
        await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        error_message = str(e)
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if "message is not modified" in error_message:
            await callback.answer("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
        else:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_message}", show_alert=True)


@router.message(Command("add"))
async def cmd_add_device(message: Message):
    """–ü—Ä–∏–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ —á–∞—Ç—É"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º device_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/add &lt;device_id&gt;</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/add abd7b5e86a733e8c</code>"
        )
        return
    
    device_id = parts[1].strip()
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device = get_device_by_id(device_id)
    if not device:
        await message.answer(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID <code>{device_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
    success = add_device_binding(device_id, chat_id)
    
    if success:
        await message.answer(
            f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É!\n\n"
            f"{format_device_info(device)}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ SMS —Å —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."
        )
    else:
        await message.answer(
            f"‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É.\n\n"
            f"{format_device_info(device)}"
        )


@router.message(Command("remove"))
async def cmd_remove_device(message: Message):
    """–û—Ç–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç —á–∞—Ç–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º device_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/remove &lt;device_id&gt;</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/remove abd7b5e86a733e8c</code>"
        )
        return
    
    device_id = parts[1].strip()
    chat_id = message.chat.id
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
    success = remove_device_binding(device_id, chat_id)
    
    if success:
        await message.answer(
            f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ <code>{device_id}</code> –æ—Ç–≤—è–∑–∞–Ω–æ –æ—Ç —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n"
            f"–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å SMS —Å —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."
        )
    else:
        await message.answer(
            f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ <code>{device_id}</code> –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É."
        )


@router.message(Command("list"))
async def cmd_list_bindings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —á–∞—Ç—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    chat_id = message.chat.id
    device_ids = get_chat_bindings(chat_id)
    
    if not device_ids:
        await message.answer(
            "üìã <b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b>\n\n"
            "‚ùå –ö —ç—Ç–æ–º—É —á–∞—Ç—É –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add &lt;device_id&gt; –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
        )
        return
    
    message_text = f"üìã <b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(device_ids)})</b>\n\n"
    
    for i, device_id in enumerate(device_ids, 1):
        device = get_device_by_id(device_id)
        if device:
            message_text += f"{i}. {format_device_info(device)}\n\n"
        else:
            message_text += f"{i}. <code>{device_id}</code> (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)\n\n"
    
    await message.answer(message_text)


async def send_sms_notification(device_id: str, sender: str, message: str, timestamp: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º SMS –≤–æ –≤—Å–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        chat_ids = get_device_chats(device_id)
        
        if not chat_ids:
            print(f"   ‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        device = get_device_by_id(device_id)
        device_name = device.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') if device else device_id
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        notification = (
            f"üì® <b>–ù–æ–≤–æ–µ SMS</b>\n\n"
            f"<b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> {device_name}\n"
            f"<b>–û—Ç:</b> <code>{sender}</code>\n"
            f"<b>–í—Ä–µ–º—è:</b> {timestamp}\n\n"
            f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ —á–∞—Ç—ã
        for chat_id in chat_ids:
            try:
                await bot.send_message(chat_id, notification)
                print(f"   ‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è standalone —Ä–µ–∂–∏–º–∞)"""
    global _bot_instance
    _bot_instance = bot
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling —Ä–µ–∂–∏–º)!")
    print(f"üì± –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {', '.join(map(str, ADMIN_IDS))}")
    print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {WEB_URL}")
    print("‚ö†Ô∏è –î–ª—è webhook —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ main.py")
    
    await dp.start_polling(bot)


def get_bot() -> Bot:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    return _bot_instance


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

